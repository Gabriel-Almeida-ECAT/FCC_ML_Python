# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn-Gabriel_resolution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sICIvVMzkGsBvLDw3_HUZKcoL2Sd-_IK
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.feature_extraction.text import TfidfVectorizer

from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

df_books.head()

df_ratings.head()

df_all = pd.merge(left=df_books, right=df_ratings, how="left", left_on='isbn', right_on='isbn')
df_all.head()

df_all.info()

# To ensure statistical significance, remove from the dataset users with less than 200 ratings and books with less than 100 ratings.
usrs_count = df_all.groupby(df_all['user'])['rating'].count()
filtered_uses = usrs_count[usrs_count > 200].index

total_filtered_usrs = len(usrs_count) - len(filtered_uses)
print(f'# filtered {total_filtered_usrs} users')

df_all = df_all[df_all['user'].isin(filtered_uses)]
df_all.info()

books_count = df_all.groupby(df_all['title'])['rating'].count()
filtered_books = books_count[books_count > 100].index

total_filtered_books = len(books_count) - len(filtered_books)
print(f'# filtered {total_filtered_books} books')

df_all = df_all[df_all['title'].isin(filtered_books)]
df_all.info()

df_all = df_all.drop_duplicates(subset=['title'], keep='first').reset_index(drop=True)
#df_all.value_counts(subset=['title'])
df_all.info()

vectorizer = TfidfVectorizer()
input_data_encoded_titles = vectorizer.fit_transform(df_all['title'])

list_titles = list(df_all['title'])
titles_vector_dict = {ind: title  for ind, title in enumerate(list_titles)}

input_data_encoded_titles.shape

# function to return recommended books - this will be tested
def get_recommends(book = ""):
  num_neighbors = 5 + 1 #the number of predictions the model will return plus the book itself
  knn_model = NearestNeighbors(n_neighbors=5)
  knn_model.fit(input_data_encoded_titles)

  recommended_books = [book, []]

  encoded_book = vectorizer.transform([book])
  distances, books_recomended = knn_model.kneighbors(encoded_book, n_neighbors=num_neighbors, return_distance=True)

  for ind, book_ind in enumerate(books_recomended[0]):
    book_title = list_titles[book_ind]
    book_distance = distances[0][ind]
    if book_title != book:
      recommended_books[1].append([book_title, book_distance])

  return recommended_books

get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()

