# -*- coding: utf-8 -*-
"""fcc_sms_text_classification_Gabriel_resolution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NSsYhGrfG-eaxD6uONNDZynFgnf7RVBg
"""

# import libraries
#try:
#  # %tensorflow_version only exists in Colab.
#  !pip install tf-nightly
#except Exception:
#  pass
import tensorflow as tf
import tensorflow
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

train_data = pd.read_csv(train_file_path, sep='\t', header=None, names=['output', 'texts'], index_col=False)
train_data

train_data.info()

train_data['output'] = np.where(train_data['output'] == 'ham', 0, 1)
train_data

max_length = len(train_data['texts'].max())
print(f"# Max length: {max_length} - \'{train_data['texts'].max()}\'")

val_data = pd.read_csv(test_file_path, sep='\t', header=None, names=['output', 'texts'], index_col=False)
val_data['output'] = np.where(val_data['output'] == 'ham', 0, 1)
val_data

val_data.info()

"""# Other alternatives to phrase vectorizing

"""

'''
from sentence_transformers import SentenceTransformer

model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
phrases = ["This is a sample phrase", "This is another example"]
embeddings = model.encode(phrases)
print(embeddings)'''

'''
import numpy as np
from gensim.models import KeyedVectors

# Load pre-trained GloVe vectors
word_vectors = KeyedVectors.load_word2vec_format('path/to/glove.6B.100d.txt', binary=False)

def get_phrase_vector(phrase):
    words = phrase.split()
    word_vecs = [word_vectors[word] for word in words if word in word_vectors]
    return np.mean(word_vecs, axis=0) if word_vecs else np.zeros(word_vectors.vector_size)

phrase = "This is a sample phrase"
vector = get_phrase_vector(phrase)
print(vector)
'''

from sklearn.feature_extraction.text import TfidfVectorizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

vectorizer = TfidfVectorizer(max_features=4000)
vectorized_text = vectorizer.fit_transform(train_data['texts'])
x_train = vectorized_text.toarray()

vectorized_text = vectorizer.transform(val_data['texts'])
x_val = vectorized_text.toarray()

from sklearn.preprocessing import LabelBinarizer

# training data x_train and validation data x_val are reshaped to (batch_size, timesteps, features)
x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))

x_val = np.reshape(x_val, (x_val.shape[0], 1, x_val.shape[1]))


label_binarizer = LabelBinarizer()
y_train = train_data['output']
y_train = label_binarizer.fit_transform(y_train)

y_val = val_data['output']
y_val = label_binarizer.fit_transform(y_val)

x_train.shape, y_train.shape, x_val.shape, y_val.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

input_shape = x_train.shape[0]

model = Sequential()
model.add(LSTM(64, activation='relu', return_sequences=True, input_shape=(1, x_train.shape[2])))
model.add(LSTM(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(x_train,
                    y_train,
                    epochs=40,
                    batch_size=64,
                    validation_data=(x_val, y_val),
                    verbose=1)

def lossAccValidationGraphs(model_history):
    acc = model_history['accuracy']
    val_acc = model_history['val_accuracy']
    loss = model_history['loss']
    val_loss = model_history['val_loss']

    epochs = range(1, len(acc) + 1)

    plt.figure(figsize=(10,10))

    plt.subplot(2,1,1)
    plt.plot(epochs, acc, 'bo', label='Training acc')
    plt.plot(epochs, val_acc, 'g', label='Validation acc')
    plt.title('Training and validation accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()

    plt.subplot(2,1,2)
    plt.plot(epochs, loss, 'bo', label='Training loss')
    plt.plot(epochs, val_loss, 'g', label='Validation loss')
    plt.title('Training and validation loss')
    plt.xlabel('Epochs')
    plt.ylabel('Acc')
    plt.legend()
    plt.show()

lossAccValidationGraphs(history.history)

# function to predict messages based on model
# (should return list containing prediction and label, ex. [0.008318834938108921, 'ham'])
def predict_message(pred_text):
  # encoded_phrase = vectorize_and_pad_phrase([pred_text]) # i cant just use the function as i need to use other function from the vectorizers
  encoded_phrase = vectorizer.transform([pred_text])
  encoded_phrase = encoded_phrase.toarray()
  encoded_phrase = np.reshape(encoded_phrase, (encoded_phrase.shape[0], 1, encoded_phrase.shape[1]))

  prediction = model.predict(encoded_phrase)

  result = 'spam' if prediction[0][0] > 0.5 else 'ham'

  return [float(prediction[0][0]), result]

pred_text = "how are you doing today?"

prediction = predict_message(pred_text)
print(prediction)

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    print(prediction, end='')
    if prediction[1] != ans:
      print(" wrong")
      passed = False
    else:
      print(" right")

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()

